class Solution {
public:
    vector<int> findSubstring(string s, vector<string>& words) {
        vector<int> ret;
        unordered_map<string, int> um1;
        int len = words[0].size();
        int m = words.size();
        for (auto& s : words) ++um1[s];
        for (int i = 0; i < len; ++i)//滑动窗口进行len次
        {
            unordered_map<string, int> um2;
            for (int left = i, right = i, count = 0; right + len <= s.size(); right += len)//right的位置在倒数第len个就不用进去了，否则会越界
            {
                //进窗口 + 维护count
                string in = s.substr(right, len);
                ++um2[in];
                //如果in不在um1中，um1就会创建一个in，所以前面判断in在不在um1中
                if (um1.count(in) && um2[in] <= um1[in]) ++count;
                //判断
                if (right - left + 1 > len * m)
                {
                    string out = s.substr(left, len);
                    //如果out不在um1中，um1就会创建一个out，所以前面判断out在不在um1中
                    if (um1.count(out) && um2[out] <= um1[out]) --count;
                    --um2[out];
                    left += len;
                }
                //更新结果
                if (count == m) ret.push_back(left);
            }
        }
        return ret;
    }
};

https://leetcode.cn/problems/substring-with-concatenation-of-all-words/
