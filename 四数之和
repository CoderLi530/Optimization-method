class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> ret;
        //排序
        sort(nums.begin(), nums.end());
        for (int i = 0; i < nums.size() - 3; ++i)// i 必须在倒数第4个位置停下，没有情况了
        {
            //判断一个数组的长度，不能小于4，小于4直接返回
            if (nums.size() <= 3)
            {
                break;
            }
            for (int j = i + 1; j < nums.size() - 2; ++j)// j 必须在倒数第三个位置停下，没有情况了
            {
                //接下来就是“三数之和”的逻辑
                int left = j + 1;
                int right = nums.size() - 1;
                while (left < right && left < nums.size() && right > 0)
                {
                    //注意nums数组中元素的长度
                    //三个数相加很可能大于 int 的最大范围，2^31 = 21 4748 3648，所以需要进行整型提升
                    if ((long)nums[left] + nums[right] + nums[j] == target - nums[i])
                    {
                        ret.push_back({nums[i], nums[j], nums[left], nums[right]});
                        while (left + 1 < right && nums[left] == nums[left + 1])
                        {
                            ++left;
                        }
                        ++left;
                        while (right > 0 && nums[right] == nums[right - 1])
                        {
                            --right;
                        }
                        --right;
                    }
                    else if ((long)nums[left] + nums[right] + nums[j] > target - nums[i])
                    {
                        --right;
                    }
                    else
                    {
                        ++left;
                    }
                }
                //对 j 进行去重
                while (j + 1 < nums.size() && nums[j] == nums[j + 1])
                {
                    ++j;
                }
            }
            //对 i 进行去重
            while (i + 1 < nums.size() && nums[i] == nums[i + 1])
            {
                ++i;
            }
        }
        return ret;
    }
};

https://leetcode.cn/problems/4sum/
