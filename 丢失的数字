class Solution {
public:
    int missingNumber(vector<int>& nums) {
        // //1. 哈希表 时间复杂度：O(N) 空间复杂度：O(N)
        // //创建哈希表，初始化哈希表
        // unordered_map<int, int> hash;
        // for (int& e : nums)
        // {
        //     hash[e]++;
        // }
        // //遍历哈希表
        // int n = nums.size();
        // for (int i = 0; i <= n; ++i)//[0, n]比数组多一个元素，所以多循环一次
        // {
        //     if (hash.count(i) == 0) return i;
        // }
        // return -1;

        // //2. 高斯求和 时间复杂度：O(N) 空间复杂度：O(1)
        // int sum = 0;//数组的和
        // int ret = -1;//缺失的数字
        // int n = nums.size();
        // for(int& e : nums) 
        // {
        //     sum += e;
        // }
        // ret = (0 + n) * (n + 1) / 2 - sum;
        // return ret;

        //3. 对数组异或操作
        int n = nums.size();
        int ret = 0;//缺失的数字
        for (int i = 0; i < n; ++i)
        {
            ret ^= i ^ nums[i];
        }
        ret ^= n;//[0, n]比数组多一个元素，所以多异或一次
        return ret;
    }
};

https://leetcode.cn/problems/missing-number/
