https://leetcode.cn/problems/add-two-numbers/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* guard = new ListNode(0);//哨兵位头节点
        ListNode* tail = guard;//尾部节点，方便进行尾插
        ListNode *cur1 = l1, *cur2 = l2;//创建节点遍历链表
        int t = 0;//计算进位的数

        //两个链表同时不为空进行计算
        while (cur1 != NULL && cur2 != NULL) {
            t += cur1->val + cur2->val;
            tail->next = new ListNode(t % 10);//取个位数
            t /= 10;//进位数
            tail = tail->next;
            cur1 = cur1->next;
            cur2 = cur2->next;
        }
        //单个链表比另一个链表长
        while (cur1 != NULL) {
            t += cur1->val;
            tail->next = new ListNode(t % 10);
            t /= 10;
            cur1 = cur1->next;
            tail = tail->next;
        }
        //单个链表比另一个链表长
        while (cur2 != NULL) {
            t += cur2->val;
            tail->next = new ListNode(t % 10);
            t /= 10;
            cur2 = cur2->next;
            tail = tail->next;
        }
        //最后t等于1说明还要进位
        if (t == 1) tail->next = new ListNode(1);
        return guard->next;
    }
};
