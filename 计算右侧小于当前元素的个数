class Solution {
    vector<int> ret;//返回结果
    vector<int> index;//存放下标的数组 
public:
    void mergeSort(vector<int>& nums, int left, int right)
    {
        //终止
        if (left >= right) return;

        //取中间数
        int mid = (left + right) / 2;

        //将数组分成两部分
        mergeSort(nums, left, mid);
        mergeSort(nums, mid + 1, right);

        //一左一右操作
        vector<int> tmpNums(right - left + 1);
        vector<int> tmpIndex(right - left + 1);
        int cur1 = left, cur2 = mid + 1, i = 0;
        while (cur1 <= mid && cur2 <= right)
        {
            if (nums[cur1] <= nums[cur2])
            {
                tmpNums[i] = nums[cur2];
                tmpIndex[i++] = index[cur2++];
            }
            else
            {
                ret[index[cur1]] += right - cur2 + 1;
                tmpNums[i] = nums[cur1];
                tmpIndex[i++] = index[cur1++];
            }
        }

        //存入剩余数组
        while (cur1 <= mid)
        {
            tmpNums[i] = nums[cur1];
            tmpIndex[i++] = index[cur1++];
        }
        while (cur2 <= right)
        {
            tmpNums[i] = nums[cur2];
            tmpIndex[i++] = index[cur2++];
        }

        //进行覆盖操作
        for (int j = left; j <= right; ++j)
        {
            nums[j] = tmpNums[j - left];
            index[j] = tmpIndex[j - left];
        }
    }
    vector<int> countSmaller(vector<int>& nums) {
        int n = nums.size();
        //注意：不初始化空间会越界
        ret.resize(n);
        index.resize(n);
        for (int i = 0; i < n; ++i) index[i] = i;
        mergeSort(nums, 0, nums.size() - 1);
        return ret;
    }
};


https://leetcode.cn/problems/count-of-smaller-numbers-after-self/
